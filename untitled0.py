# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gyE1YIgDpVk2LM4e47cZiMmfNn_bkMbQ
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt



import warnings
warnings.filterwarnings('ignore')

tags = pd.read_csv('/content/tags.csv')
ratings = pd.read_csv('/content/ratings.csv')
links = pd.read_csv('/content/links.csv')
movies = pd.read_csv('/content/movies.csv')

sns.set(style="whitegrid")

missing_data_tags = tags.isnull().sum()
missing_data_ratings = ratings.isnull().sum()
missing_data_links = links.isnull().sum()
missing_data_movies = links.isnull().sum()

tags_desc = tags.describe()
ratings_desc = ratings.describe()
links_desc = links.describe()
movies_desc = movies.describe()

top_users_ratings = ratings['userId'].value_counts().head(10)
top_users_ratings_df = ratings[ratings['userId'].isin(top_users_ratings.index)]

plt.figure(figsize=(12, 6))
sns.countplot(data=top_users_ratings_df, x='userId', palette='viridis')
plt.title('Top 10 Users by Number of Ratings')
plt.xlabel('User ID')
plt.ylabel('Number of Ratings')
plt.show()

top_users_tags = tags['userId'].value_counts().head(10)
top_users_tags_df = tags[tags['userId'].isin(top_users_tags.index)]

plt.figure(figsize=(12, 6))
sns.countplot(data=top_users_tags_df, x='userId', palette='plasma')
plt.title('Top 10 Users by Number of Tags')
plt.xlabel('User ID')
plt.ylabel('Number of Tags')
plt.show()

# Movie Popularity Analysis
# Top 10 most rated movies
top_movies_rated = ratings['movieId'].value_counts().head(10)
top_movies_rated_df = ratings[ratings['movieId'].isin(top_movies_rated.index)]

plt.figure(figsize=(12, 6))
sns.countplot(data=top_movies_rated_df, x='movieId', palette='magma')
plt.title('Top 10 Most Rated Movies')
plt.xlabel('Movie ID')
plt.ylabel('Number of Ratings')
plt.show()

# Top 10 most tagged movies
top_movies_tagged = tags['movieId'].value_counts().head(10)
top_movies_tagged_df = tags[tags['movieId'].isin(top_movies_tagged.index)]

plt.figure(figsize=(12, 6))
sns.countplot(data=top_movies_tagged_df, x='movieId', palette='inferno')
plt.title('Top 10 Most Tagged Movies')
plt.xlabel('Movie ID')
plt.ylabel('Number of Tags')
plt.show()

# Tag Variety Analysis
# Top 20 most common tags
top_tags = tags['tag'].value_counts().head(20)

plt.figure(figsize=(12, 8))
sns.barplot(y=top_tags.index, x=top_tags.values, palette='cividis')
plt.title('Top 20 Most Common Tags')
plt.xlabel('Number of Times Tag Used')
plt.ylabel('Tag')
plt.show()

# Correlation Analysis
# Correlation between number of ratings and number of tags per movie
ratings_per_movie = ratings['movieId'].value_counts()
tags_per_movie = tags['movieId'].value_counts()
correlation = pd.DataFrame({'ratings_count': ratings_per_movie, 'tags_count': tags_per_movie}).corr()

plt.figure(figsize=(8, 6))
sns.heatmap(correlation, annot=True, cmap='coolwarm')
plt.title('Correlation Between Ratings and Tags Count')
plt.show()

top_users = ratings['userId'].value_counts().head(10).index
top_movies = ratings['movieId'].value_counts().head(10).index

interaction_matrix = pd.pivot_table(ratings[ratings['userId'].isin(top_users) & ratings['movieId'].isin(top_movies)],
                                    values='rating', index='userId', columns='movieId')

plt.figure(figsize=(12, 8))
sns.heatmap(interaction_matrix, annot=True, cmap='coolwarm')
plt.title('Heatmap of Ratings by Top 10 Users and Top 10 Movies')
plt.xlabel('Movie ID')
plt.ylabel('User ID')
plt.show()

# Rating Distribution by User
plt.figure(figsize=(12, 6))
for user in top_users:
    sns.kdeplot(ratings[ratings['userId'] == user]['rating'], label=f'User {user}', shade=True)
plt.title('Rating Distribution by Top 10 Users')
plt.xlabel('Rating')
plt.ylabel('Density')
plt.legend()
plt.show()

# Rating Distribution by Movie
plt.figure(figsize=(12, 6))
for movie in top_movies:
    sns.kdeplot(ratings[ratings['movieId'] == movie]['rating'], label=f'Movie {movie}', shade=True)
plt.title('Rating Distribution by Top 10 Movies')
plt.xlabel('Rating')
plt.ylabel('Density')
plt.legend()
plt.show()

# Tag Co-Occurrence
# Create a matrix showing how often tags appear together
from sklearn.feature_extraction.text import CountVectorizer
from scipy.sparse import csr_matrix

tag_cooccurrence = tags.groupby('movieId')['tag'].apply(lambda x: ','.join(x))
vectorizer = CountVectorizer(tokenizer=lambda x: x.split(','))
tag_matrix = vectorizer.fit_transform(tag_cooccurrence)
tag_co_matrix = (tag_matrix.T @ tag_matrix)
tag_co_matrix.setdiag(0)

plt.figure(figsize=(12, 12))
sns.heatmap(tag_co_matrix.toarray(), cmap='Blues', xticklabels=vectorizer.get_feature_names_out(),
            yticklabels=vectorizer.get_feature_names_out())
plt.title('Tag Co-Occurrence Matrix')
plt.show()

# Advanced Correlations
# Correlations involving user activity, movie popularity, and average rating
user_activity = ratings.groupby('userId').agg({'rating': 'count', 'movieId': 'nunique', 'rating': 'mean'}).rename(
    columns={'rating': 'num_ratings', 'movieId': 'num_movies_rated', 'rating': 'avg_rating'})
movie_popularity = ratings.groupby('movieId').agg({'rating': 'count', 'userId': 'nunique', 'rating': 'mean'}).rename(
    columns={'rating': 'num_ratings', 'userId': 'num_users_rated', 'rating': 'avg_rating'})

correlation_users = user_activity.corr()
correlation_movies = movie_popularity.corr()

plt.figure(figsize=(8, 6))
sns.heatmap(correlation_users, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix for User Activity')
plt.show()

plt.figure(figsize=(8, 6))
sns.heatmap(correlation_movies, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix for Movie Popularity')
plt.show()